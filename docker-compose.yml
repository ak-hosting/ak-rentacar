# Bursa Oto Kiralama - Docker Compose
# Geliştirme ve production ortamları için

version: '3.8'

services:
  # Ana web uygulaması
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bursa-rentacar-web
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=production
    volumes:
      # Geliştirme için hot reload (opsiyonel)
      - ./assets:/usr/share/nginx/html/assets:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bursa-network

  # Development ortamı için (opsiyonel)
  web-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: bursa-rentacar-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    restart: unless-stopped
    profiles:
      - dev
    networks:
      - bursa-network

  # Nginx reverse proxy (production için)
  nginx-proxy:
    image: nginx:alpine
    container_name: bursa-rentacar-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    restart: unless-stopped
    profiles:
      - production
    networks:
      - bursa-network

  # Redis cache (opsiyonel)
  redis:
    image: redis:alpine
    container_name: bursa-rentacar-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    profiles:
      - cache
    networks:
      - bursa-network

  # PostgreSQL veritabanı (opsiyonel)
  postgres:
    image: postgres:15-alpine
    container_name: bursa-rentacar-db
    environment:
      POSTGRES_DB: bursa_rentacar
      POSTGRES_USER: rentacar_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    profiles:
      - database
    networks:
      - bursa-network

  # phpMyAdmin (veritabanı yönetimi için)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: bursa-rentacar-admin
    environment:
      PMA_HOST: postgres
      PMA_PORT: 5432
      PMA_USER: rentacar_user
      PMA_PASSWORD: ${DB_PASSWORD:-secure_password}
    ports:
      - "8081:80"
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - database
    networks:
      - bursa-network

  # Monitoring (opsiyonel)
  monitoring:
    image: prom/prometheus:latest
    container_name: bursa-rentacar-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - bursa-network

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local

networks:
  bursa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 